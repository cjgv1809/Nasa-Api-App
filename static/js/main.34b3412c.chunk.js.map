{"version":3,"sources":["components/Home.js","components/NavBar.js","components/NasaPhoto.js","App.js","serviceWorker.js","index.js"],"names":["Home","className","to","NavBar","NasaPhoto","useState","photo","setPhoto","url","process","useEffect","a","fetch","res","json","data","console","log","fetchPhoto","media_type","src","hdurl","alt","title","frameBorder","gesture","allow","allowFullScreen","width","height","date","explanation","params","particles","number","value","size","fpsLimit","interactivity","events","onClick","enable","mode","onhover","collisions","move","direction","outMode","random","speed","straight","resize","App","basename","window","location","pathname","component","path","exact","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6MAaeA,EAVF,WACX,OACE,yBAAKC,UAAU,QACb,kBAAC,IAAD,CAAMA,UAAU,YAAYC,GAAG,cAA/B,2B,iCCSSC,EAZA,WACb,OACE,yBAAKF,UAAU,UACb,4BACE,kBAAC,IAAD,CAAMA,UAAU,OAAOC,GAAG,KAA1B,oB,iBCoFOE,EAvFG,WAAO,IAAD,EACIC,mBAAS,MADb,mBACfC,EADe,KACRC,EADQ,KAGhBC,EAAG,sDADMC,2CACN,YAcT,OAZAC,qBAAU,WAAM,4CAGd,8BAAAC,EAAA,sEACoBC,MAAMJ,GAD1B,cACQK,EADR,gBAEqBA,EAAIC,OAFzB,OAEQC,EAFR,OAGER,EAASQ,GACTC,QAAQC,IAAIJ,GACZG,QAAQC,IAAIF,GALd,4CAHc,0DACdG,KASC,IAEEZ,EAGH,oCACE,kBAAC,EAAD,MACA,yBAAKL,UAAU,cACS,UAArBK,EAAMa,WACL,yBAAKC,IAAKd,EAAMe,MAAOC,IAAKhB,EAAMiB,MAAOtB,UAAU,UAEnD,4BACEsB,MAAM,cACNH,IAAKd,EAAME,IACXgB,YAAY,IACZC,QAAQ,QACRC,MAAM,kBACNC,iBAAe,EACf1B,UAAU,aACV2B,MAAM,MACNC,OAAO,QAGX,6BACE,4BAAKvB,EAAMiB,OACX,uBAAGtB,UAAU,QAAQK,EAAMwB,MAC3B,uBAAG7B,UAAU,eAAeK,EAAMyB,aAClC,kBAAC,IAAD,CACEH,MAAO,OACPC,OAAQ,OACRG,OAAQ,CACNC,UAAW,CACTC,OAAQ,CACNC,MAAO,IAETC,KAAM,CACJD,MAAO,IAGXE,SAAU,GACVC,cAAe,CACbC,OAAQ,CACNC,QAAS,CACPC,QAAQ,EACRC,KAAM,QAERC,QAAS,CACPF,QAAQ,EACRC,KAAM,WAERE,WAAY,CACVH,QAAQ,KAIdI,KAAM,CACJC,UAAW,OACXL,QAAQ,EACRM,QAAS,SACTC,QAAQ,EACRC,MAAO,EACPC,UAAU,GAEZC,QAAQ,QA7DD,+B,OCJNC,MAXf,WACE,OACE,kBAAC,IAAD,CAAeC,SAAUC,OAAOC,SAASC,UAAY,IACnD,yBAAKvD,UAAU,OACb,kBAAC,IAAD,CAAOwD,UAAWzD,EAAM0D,KAAK,IAAIC,OAAK,IACtC,kBAAC,IAAD,CAAOF,UAAWrD,EAAWsD,KAAK,kBCCtBE,QACW,cAA7BN,OAAOC,SAASM,UAEe,UAA7BP,OAAOC,SAASM,UAEhBP,OAAOC,SAASM,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3D,QAAQ2D,MAAMA,EAAMC,a","file":"static/js/main.34b3412c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Home = () => {\r\n  return (\r\n    <div className=\"home\">\r\n      <Link className=\"home-link\" to=\"/nasaphoto\">\r\n        Explore the Universe!\r\n      </Link>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst NavBar = () => {\r\n  return (\r\n    <div className=\"navbar\">\r\n      <ul>\r\n        <Link className=\"link\" to=\"/\">\r\n          Let's Go Home\r\n        </Link>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport NavBar from \"./NavBar\";\r\nimport Particles from \"react-particles-js\";\r\n\r\nconst NasaPhoto = () => {\r\n  const [photo, setPhoto] = useState(null);\r\n  const apiKey = process.env.REACT_APP_NASA_KEY;\r\n  const url = `https://api.nasa.gov/planetary/apod?api_key=${apiKey}&hd=true`;\r\n\r\n  useEffect(() => {\r\n    fetchPhoto();\r\n\r\n    async function fetchPhoto() {\r\n      const res = await fetch(url);\r\n      const data = await res.json();\r\n      setPhoto(data);\r\n      console.log(res);\r\n      console.log(data);\r\n    }\r\n  }, []);\r\n\r\n  if (!photo) return <div></div>;\r\n\r\n  return (\r\n    <>\r\n      <NavBar />\r\n      <div className=\"nasa-photo\">\r\n        {photo.media_type === \"image\" ? (\r\n          <img src={photo.hdurl} alt={photo.title} className=\"photo\" />\r\n        ) : (\r\n          <iframe\r\n            title=\"space-video\"\r\n            src={photo.url}\r\n            frameBorder=\"0\"\r\n            gesture=\"media\"\r\n            allow=\"encrypted-media\"\r\n            allowFullScreen\r\n            className=\"nasa-video\"\r\n            width=\"500\"\r\n            height=\"350\"\r\n          />\r\n        )}\r\n        <div>\r\n          <h1>{photo.title}</h1>\r\n          <p className=\"date\">{photo.date}</p>\r\n          <p className=\"explanation\">{photo.explanation}</p>\r\n          <Particles\r\n            width={\"100%\"}\r\n            height={\"100%\"}\r\n            params={{\r\n              particles: {\r\n                number: {\r\n                  value: 50,\r\n                },\r\n                size: {\r\n                  value: 3,\r\n                },\r\n              },\r\n              fpsLimit: 60,\r\n              interactivity: {\r\n                events: {\r\n                  onClick: {\r\n                    enable: true,\r\n                    mode: \"push\",\r\n                  },\r\n                  onhover: {\r\n                    enable: true,\r\n                    mode: \"repulse\",\r\n                  },\r\n                  collisions: {\r\n                    enable: true,\r\n                  },\r\n                },\r\n              },\r\n              move: {\r\n                direction: \"none\",\r\n                enable: true,\r\n                outMode: \"bounce\",\r\n                random: false,\r\n                speed: 6,\r\n                straight: false,\r\n              },\r\n              resize: true,\r\n            }}\r\n          />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NasaPhoto;\r\n","import React from \"react\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport Home from \"./components/Home\";\nimport NasaPhoto from \"./components/NasaPhoto\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <BrowserRouter basename={window.location.pathname || \"\"}>\n      <div className=\"app\">\n        <Route component={Home} path=\"/\" exact />\n        <Route component={NasaPhoto} path=\"/nasaphoto\" />\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}